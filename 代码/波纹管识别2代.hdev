<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c></c>
<c></c>
<c></c>
<c>* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<c>*1.读取图片</c>
<l>list_files ('C:/Users/Administrator/Desktop/测试图片/01条光缺陷', ['files','follow_links'], ImageFiles)</l>
<l>tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<c>    *1.读取图片</c>
<l>    read_image (Image, ImageFiles[Index])</l>
<c>    * Image Acquisition 01: Do something</c>
<c></c>
<c></c>
<l>*    read_image (Image, 'C:/Users/Administrator/Desktop/测试图片/01条光缺陷/缺陷01条光_20190514170653051.bmp')</l>
<c>    *用中值滤波去除噪点</c>
<l>    rgb1_to_gray(Image,GrayImage)</l>
<l>    mean_image (GrayImage, ImageMean1, 9, 9)</l>
<c>    *获取图片宽高</c>
<l>    get_image_size (Image, Width, Height)</l>
<l>*    rgb1_to_gray (ImageMean1, GrayImage)</l>
<c>    *生成窗口</c>
<l>    dev_close_window ()</l>
<l>    dev_open_window (0, 0, Width/9, Height/9, 'green', WindowHandle)</l>
<l>    dev_display (Image)</l>
<c>    *2.对图像螺纹区域进行切割，提取螺纹胶管上的每一个凸起用于识别</c>
<c>    *滤波处理图片显示   </c>
<l>    dev_display (ImageMean1)</l>
<c>    *灰度直方图提取感兴趣区域</c>
<l>    threshold (ImageMean1, Regions, 3, 255)</l>
<c>    *切割区域</c>
<l>    connection (Regions, ConnectedRegions)</l>
<c>    *特征提取提取螺纹</c>
<l>    select_shape (ConnectedRegions, SelectedRegions, ['area','height','width'], 'and', [2204.5,146.81,12.66], [50000,272.51,85.83])</l>
<c>    *把分割区域统一</c>
<l>    union1 (SelectedRegions, RegionUnion)</l>
<c>    *进行闭运算将来切割螺纹</c>
<l>    closing_circle (RegionUnion, RegionClosing, 11)</l>
<l>    connection (RegionClosing, ConnectedRegions1)</l>
<l>    select_shape (ConnectedRegions1, SelectedRegions1, 'area', 'and', 7388.89, 20000)</l>
<l>    dev_display (SelectedRegions1)</l>
<l>    union1 (SelectedRegions1, RegionUnion1)</l>
<c>    *形状转化</c>
<l>    shape_trans (RegionUnion1, RegionTrans, 'convex')</l>
<c>    *求角度</c>
<l>    orientation_region (RegionTrans, Phi1)</l>
<c>    *求面积</c>
<l>    area_center (RegionTrans, Area1, Row1, Column1)</l>
<c>    *转正</c>
<l>    vector_angle_to_rigid (Row1, Column1, Phi1, Row1, Column1, Phi1, HomMat2D)</l>
<c>    *放射变换</c>
<l>    affine_trans_image (ImageMean1, ImageAffineTrans, HomMat2D, 'constant', 'false')</l>
<c>    *区域进行放射变化，以便用于图像的截取</c>
<l>    affine_trans_region (RegionTrans, RegionAffineTrans, HomMat2D, 'nearest_neighbor')</l>
<c>    *截取图像</c>
<l>    reduce_domain (ImageAffineTrans, RegionAffineTrans, ImageReduced)</l>
<l>    dev_display (ImageReduced)</l>
<l>    *rgb1_to_gray (ImageReduced, GrayImage)</l>
<l>    *dev_display (GrayImage)</l>
<c>    *二值化用于每个凸起的提取</c>
<l>    threshold (ImageReduced, Regions1, 1, 255)</l>
<l>    dev_display (Regions1)</l>
<l>    closing_circle (Regions1, RegionClosing1, 14)</l>
<l>    connection (RegionClosing1, ConnectedRegions2)</l>
<l>    select_shape (ConnectedRegions2, SelectedRegions2, 'area', 'and', 150, 99999)</l>
<l>    *union1 (SelectedRegions2, RegionUnion2)</l>
<l>    *reduce_domain (GrayImage, RegionUnion2, ImageReduced1)</l>
<l>    *dev_display (ImageReduced1)</l>
<c>    </c>
<l>    *sort_region (SelectedRegions2, SortedRegions1, 'first_point', 'true', 'row')</l>
<l>    *dev_display (SortedRegions1)</l>
<l>    area_center (SelectedRegions2, Area, Row, Column)</l>
<l>    *area_center (SortedRegions1, Area, Row, Column)</l>
<l>    *a := |Area|</l>
<c>    *截取每一个凸起用于分辨用于模型识别</c>
<l>    for i := 0 to |Area|-1 by 1</l>
<l>        confidence:=[]</l>
<c>        *获得要截取的矩形面积方位</c>
<l>        gen_rectangle1 (Rectangle, Row[i]-120, Column[i]-55, Row[i]+120, Column[i]+55)</l>
<c>        *截取图片</c>
<l>        reduce_domain (ImageReduced, Rectangle, ImageReduced2)</l>
<l>        dev_display (ImageReduced2)</l>
<c>        *形成一个新的图像</c>
<l>        crop_domain (ImageReduced2, ImagePart)</l>
<l>        dev_display (ImagePart)</l>
<l>    endfor</l>
<l>endfor</l>
<l>        read_class_mlp ('C:/Users/Administrator/Desktop/波纹管识别/1', MLPHandle)</l>
<c></c>
<l>*list_files ('C:/Users/Administrator/Desktop/波纹管识别/测试集', ['files','follow_links'], ImageFiles)</l>
<l>*tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<c></c>
<c></c>
<l>*for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    *read_image (Image, ImageFiles[Index])</l>
<c></c>
<l>        threshold(ImagePart, Region1, 1, 255)</l>
<l>        reduce_domain(ImagePart, Region1, ImageReduced2)</l>
<l>        crop_domain(ImageReduced2, ImagePart2)</l>
<l>        cooc_feature_image (Region1, ImagePart2, 6, 0, Energy1, Correlation1, Homogeneity1, Contrast1)</l>
<l>        FeatureVector2 := [Energy1, Correlation1, Homogeneity1, Contrast1]</l>
<l>        sobel_amp (ImagePart2, EdgeAmplitude3, 'sum_abs', 3)</l>
<l>        gray_histo_abs (Region1, EdgeAmplitude3, 1, AbsoluteHisto3)</l>
<l>        FeatureVector2 :=[FeatureVector2,AbsoluteHisto3]</l>
<l>        FeatureVector := real(FeatureVector2)</l>
<c>        *通过多层感知器计算一个特征向量的类</c>
<l>        classify_class_mlp (MLPHandle, FeatureVector, 1, FoundClassIDs, Confidence)</l>
<l>        confidence:=[confidence,Confidence]</l>
<l>        if (FoundClassIDs[0]==0)</l>
<c>    </c>
<l>            dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>            dev_display(Image)        </l>
<l>            disp_message (WindowHandle, ImageFiles[Index], 'window', 0, 0, 'black', 'true')</l>
<l>            disp_message (WindowHandle, 'Result=good', 'window', 20, 0, 'black', 'true')</l>
<l>            write_image (ImagePart, 'bmp', 0, 'C:/Users/Administrator/Desktop/波纹管识别/good5/'+Index+i+'.bmp')</l>
<c>              </c>
<l>        else</l>
<c>            </c>
<l>            dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>            dev_display(Image)</l>
<l>            disp_message (WindowHandle, ImageFiles[Index], 'window', 0, 0, 'black', 'true')</l>
<l>            disp_message (WindowHandle, 'Result=bad', 'window', 20, 0, 'black', 'true')</l>
<l>            write_image (ImagePart, 'bmp', 0, 'C:/Users/Administrator/Desktop/波纹管识别/bad5/'+Index+i+'.bmp')</l>
<c>               </c>
<l>        endif</l>
<l>*endfor      </l>
<l>        *write_image (ImagePart, 'bmp', 0, 'C:/Users/Administrator/Desktop/波纹管识别/bad/'+Index+i+'.bmp')</l>
<l>    endfor</l>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
