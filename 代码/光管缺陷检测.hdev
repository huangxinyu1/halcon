<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c></c>
<c></c>
<c></c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('C:/Users/Administrator/Desktop/测试图片/01光管缺陷', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,1]" as_ord="1">* Image Acquisition 02: Code generated by Image Acquisition 02</c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2]" as_ord="1">*list_files ('C:/Users/Administrator/Desktop/测试图片/01条光缺陷', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,3]" as_ord="1">*tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<c></c>
<c></c>
<c></c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    * Image Acquisition 01: Do something</c>
<l>    dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>    dev_display (Image)</l>
<c>    *处理图像的到所需要的区域并切割出来</c>
<l>    rgb1_to_gray (Image, GrayImage)</l>
<c>    </c>
<l>    mean_image (GrayImage, ImageMean, 9, 9)</l>
<c>    </c>
<l>    dev_display (ImageMean)</l>
<c>    </c>
<l>    threshold (ImageMean, Regions, 17, 255)</l>
<l>    connection (Regions, ConnectedRegions)</l>
<c>    </c>
<l>    select_shape (ConnectedRegions, SelectedRegions1, 'height', 'and', 61.71, 260.77)</l>
<c>    </c>
<c></c>
<l>    union1 (SelectedRegions1, RegionUnion)</l>
<c>    *形状转化</c>
<l>    shape_trans (RegionUnion, RegionTrans, 'convex')</l>
<c>    *求角度</c>
<l>    orientation_region (RegionTrans, Phi1)</l>
<c>    *求面积</c>
<l>    area_center (RegionTrans, Area1, Row1, Column1)</l>
<c>    *转正</c>
<l>    vector_angle_to_rigid (Row1, Column1, Phi1, Row1, Column1, Phi1, HomMat2D)</l>
<c>    *放射变换</c>
<l>    affine_trans_image (ImageMean, ImageAffineTrans, HomMat2D, 'constant', 'false')</l>
<c>    *区域进行放射变化，以便用于图像的截取</c>
<l>    affine_trans_region (RegionTrans, RegionAffineTrans, HomMat2D, 'nearest_neighbor')</l>
<c>    *截取图像</c>
<l>    reduce_domain (ImageAffineTrans, RegionAffineTrans, ImageReduced)</l>
<l>    dev_display (ImageReduced)    </l>
<c>    </c>
<l>    threshold (ImageReduced, Regions1, 17, 255)</l>
<l>    fill_up (Regions1, RegionFillUp)</l>
<l>    area_center (RegionFillUp, Area2, Row2, Column2)</l>
<l>    closing_circle (RegionFillUp, RegionClosing1, 15)</l>
<l>    connection (RegionClosing1, ConnectedRegions1)</l>
<l>    *gray_dilation_rect (ConnectedRegions1, ImageMax, 11, 11)</l>
<l>     *closing_circle (ConnectedRegions1, RegionClosing, 3.5)</l>
<c></c>
<l>    *opening_circle (ConnectedRegions1, RegionOpening, 15)</l>
<l>    dev_display (ConnectedRegions1)</l>
<c>    </c>
<l>    select_shape (ConnectedRegions1, SelectedRegions, 'area', 'and', 0, 3308.82)</l>
<l>    *select_shape (RegionOpening, SelectedRegions, 'height', 'and', 0, 148.42)</l>
<l>    union1 (SelectedRegions, RegionUnion1)</l>
<l>    shape_trans (RegionUnion1, RegionTrans1, 'convex')</l>
<c>    *求角度</c>
<l>    orientation_region (RegionTrans1, Phi)</l>
<c>    *求面积</c>
<l>    area_center (RegionTrans1, Area3, Row3, Column3)</l>
<c>    *转正</c>
<l>    vector_angle_to_rigid (Row3, Column3, Phi, Row3, Column3, Phi, HomMat2D1)</l>
<c>    *放射变换</c>
<l>    affine_trans_image (ImageReduced, ImageAffineTrans1, HomMat2D1, 'constant', 'false')</l>
<c>    *区域进行放射变化，以便用于图像的截取</c>
<l>    affine_trans_region (RegionTrans1, RegionAffineTrans1, HomMat2D1, 'nearest_neighbor')</l>
<c>    *截取图像</c>
<l>    reduce_domain (ImageAffineTrans1, RegionAffineTrans1, ImageReduced1)</l>
<l>    dev_display (ImageReduced)    </l>
<l>    *select_shape (RegionClosing, SelectedRegions, 'height', 'and', 60.4, 157.46)</l>
<c>    </c>
<l>    threshold (ImageReduced1, Regions2, 5, 189)</l>
<l>    connection (Regions2, ConnectedRegions2)</l>
<c>    </c>
<l>    select_shape (ConnectedRegions2, SelectedRegions2, 'width', 'and', 36.476, 50)</l>
<l>    area_center (SelectedRegions2, Area, Row, Column)</l>
<l>    a := |Area|</l>
<l>    if(a==0)</l>
<l>        disp_message (WindowHandle, 'Result=ok', 'window', 20, 0, 'black', 'true')</l>
<l>    else</l>
<l>        disp_message (WindowHandle, 'Result=NO'+a, 'window', 20, 0, 'black', 'true')</l>
<l>    endif</l>
<l>    dev_display (SelectedRegions)</l>
<l>    stop ()</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
