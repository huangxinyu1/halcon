<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c></c>
<c>*可以看halcon中的color_fuses历程很好</c>
<c></c>
<c>******************************************************************</c>
<c>*****颜色识别</c>
<c>******************************************************************</c>
<c>*根据HSV或者RGB来识别或者根据分类器识别</c>
<c>*要会1.图形处理基本知识（rgb（hsv），gray）</c>
<c>    *2.图像灰度变换（scale_image）</c>
<c>    *3.图像增强(emphasize)</c>
<c>    *4.图像几何变换（仿射变换，极坐标变换）</c>
<c>    *5.图像分割（BLOB分析，边缘检测，分水岭，reduce_domain）</c>
<c>    *6.图像的频域（FFt_image，用于缺陷检测）</c>
<c>    *7.图像形态学</c>
<c>    *8.图像复原</c>
<c>    *9.运动图像</c>
<c>    *10.图像配准（模板匹配）</c>
<c>**********************************************************************</c>
<c>***关于糖豆颜色的识别</c>
<c>**********************************************************************</c>
<c>*1.采集助手链接实时的相机/这里我用读取图片来代替</c>
<l> read_image (Image1, 'printer_chip/printer_chip_01')</l>
<c> *对图片进行rgb读取</c>
<l> decompose3 (Image1, Image11, Image2, Image3)</l>
<c> *对rgb图像转换为hsv</c>
<l> trans_from_rgb (Image11, Image11, Image11, ImageResult1, ImageResult2, ImageResult3, 'hsv')</l>
<c> *二值化提取感兴趣的区域</c>
<l> threshold (ImageResult1, Region2, 128, 255)</l>
<c> *分割出不同的区域</c>
<l> connection (Region2, ConnectedRegions2)</l>
<c> *特征选择由面积选出来</c>
<l> select_shape (ConnectedRegions2, SelectedRegions1, 'area', 'and', 150, 99999)</l>
<c> </c>
<c> *************************************************************************</c>
<c> ***关于多个巧克力豆的颜色识别</c>
<c> ************************************************************************</c>
<c> *1.采集图片</c>
<l> read_image (Image, 'printer_chip/printer_chip_01')</l>
<c> </c>
<c> **视频抓取图片用 grab_image_async</c>
<c> *获取图像宽高</c>
<l> get_image_size (Image, Width, Height)</l>
<c> *关闭窗口</c>
<l> dev_close_window ()</l>
<c> *打开新的窗口</c>
<c> *参数（左上角行坐标，左上角列坐标，窗口宽，窗口高，背景颜色，句柄）</c>
<l> dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<c> *显示图片</c>
<l> dev_display (Image)</l>
<c> *定义将要识别物体的名称</c>
<l> Regions := ['黄','红','橙','绿','背景']</l>
<c>*形成一个空的区域为了放区域</c>
<l> gen_empty_obj (Classes)</l>
<c> </c>
<c> *循环提取所有的区域用于识别</c>
<l> for i := 1 to |Regions|+1 by 1</l>
<l>     dev_display (Image)</l>
<c>     *显示空区域</c>
<l>     dev_display (Classes)</l>
<c>     *选取指定区域提取出来（主要在窗口显示出字体）</c>
<l>     disp_message (WindowHandle, '请选取指定区域：', 'window', 12, 12, 'black', 'true')</l>
<c>     *画出要显示出来的区域</c>
<l>     gen_rectangle1 (Rectangle, 30, 20, 100, 200)</l>
<c>     *把所画的区域和空区域连接起来赋值个空区域，形成新的区域</c>
<l>     concat_obj (Rectangle, Classes, Classes)</l>
<c>     </c>
<l> endfor</l>
<c> </c>
<c> *将我所划分的区域联合为一个区域</c>
<l> union1 (Rectangle, RegionUnion)</l>
<c> *创建分类器</c>
<c> *参数（输入特征变量的数量，神经网络层数，输入类别要分几类，'softmax', 'normalization',....）</c>
<l> create_class_mlp (20, 10, 5, 'softmax', 'normalization', 10, 42, MLPHandle)</l>
<c> *添加样本将图像和Classes相关联</c>
<l> add_samples_image_class_mlp (Image, Classes, MLPHandle)</l>
<c> *开始训练 模型</c>
<l>disp_message (WindowHandle, '训练模型', 'window', 12, 12, 'black', 'true')</l>
<l>train_class_mlp (MLPHandle, 200, 1, 0.01, Error, ErrorLog)</l>
<c></c>
<c></c>
<c>*开始识别</c>
<l>while (true)</l>
<c>    *视频抓取图片</c>
<l>    grab_image_async (Image, Acq, -1)</l>
<c>    *识别</c>
<c>    *参数（输入的得到的图像，输出得到的区域，句柄，阈值认为是这一域的值）</c>
<l>    classify_image_class_mlp (Image, ClassRegions, MLPHandle, 0.5)</l>
<c>    *显示</c>
<l>    for Index := 1 to 4 by 1</l>
<l>        dev_clear_window ()</l>
<l>        copy_obj (Classes, ObjectsSelected, 1, 1)</l>
<l>        disp_message (WindowHandle, Regions[Index-1], 'window', 12, 12, 'black', 'true')</l>
<l>        dev_display (ObjectsSelected)</l>
<l>    endfor</l>
<c>    </c>
<c>    </c>
<l>endwhile</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
