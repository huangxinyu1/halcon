<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<c></c>
<c></c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,1]" as_ord="1">read_image (Image, 'C:/Users/Administrator/Desktop/大帽/大帽1/20180425165330605.bmp')</l>
<l>rgb1_to_gray (Image, GrayImage)</l>
<l>Classes := ['big','small']</l>
<c>*获取特征向量</c>
<l>cooc_feature_image (GrayImage, Image, 6, 0, Energy, Correlation, Homogeneity, Contrast)</l>
<l>FeatureVector0 := [Energy,Correlation, Homogeneity, Contrast]</l>
<l>sobel_amp (GrayImage, EdgeAmplitude, 'sum_abs', 3)</l>
<l>gray_histo_abs (EdgeAmplitude, EdgeAmplitude, 1, AbsoluteHisto)</l>
<l>FeatureVector0 := [FeatureVector0,AbsoluteHisto]</l>
<c>*创建一个多层感知器</c>
<l>create_class_mlp (|FeatureVector0|, 15, |Classes|, 'softmax', 'normalization', 10, 42, Handle)</l>
<c></c>
<c>*训练分类0</c>
<c as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,1]" as_ord="1">* Image Acquisition 02: Code generated by Image Acquisition 02</c>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,2]" as_ord="1">list_files ('C:/Users/Administrator/Desktop/大帽/大帽1', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 02" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles|-1 by 1</l>
<l>    read_image (Image, ImageFiles[Index])</l>
<l>    threshold (Image, region1, 1, 255)</l>
<l>    reduce_domain(Image, region1, ImageReduced1)</l>
<l>    crop_domain(ImageReduced1, ImagePart1)</l>
<l>    cooc_feature_image (region1, ImagePart1, 6, 0, Energy1, Correlation1, Homogeneity1, Contrast1)</l>
<l>    FeatureVector1 := [Energy,Correlation, Homogeneity, Contrast]</l>
<l>    sobel_amp (ImagePart1, EdgeAmplitude1, 'sum_abs', 3)</l>
<l>    gray_histo_abs (region1, EdgeAmplitude1, 1, AbsoluteHisto1)</l>
<l>    FeatureVector1 := [FeatureVector1,AbsoluteHisto1]</l>
<l>    FeatureVector := real(FeatureVector1)</l>
<c>    *把一个训练样本添加到一个多层感知器的训练数据中</c>
<l>    add_sample_class_mlp (Handle, FeatureVector, 0)</l>
<c></c>
<l>endfor</l>
<c></c>
<c>*训练分类1</c>
<c as_id="image_acquisition" as_name="Image Acquisition 03" as_grp="[1,1]" as_ord="1">* Image Acquisition 03: Code generated by Image Acquisition 03</c>
<l as_id="image_acquisition" as_name="Image Acquisition 03" as_grp="[1,2]" as_ord="1">list_files ('C:/Users/Administrator/Desktop/大帽/大帽2', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 03" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    read_image (Image, ImageFiles[Index])</l>
<l>    threshold(Image, Region, 1, 255)</l>
<l>    reduce_domain(Image, Region, ImageReduced)</l>
<l>    crop_domain(ImageReduced, ImagePart)</l>
<l>    cooc_feature_image (region1, ImagePart1, 6, 0, Energy1, Correlation1, Homogeneity1, Contrast1)</l>
<l>    FeatureVector1 := [Energy,Correlation, Homogeneity, Contrast]</l>
<l>    sobel_amp (ImagePart, EdgeAmplitude2, 'sum_abs', 3)</l>
<l>    gray_histo_abs (Region, EdgeAmplitude2, 1, AbsoluteHisto2)</l>
<l>    FeatureVector1 := [FeatureVector1,AbsoluteHisto2]</l>
<l>    FeatureVector := real(FeatureVector1)</l>
<c>    *把一个训练样本添加到一个多层感知器的训练数据中</c>
<l>    add_sample_class_mlp (Handle, FeatureVector, 1)</l>
<l>endfor</l>
<c>*训练一个多层感知器</c>
<l>train_class_mlp (Handle, 200, 1, 0.0001, Error, ErrorLog)</l>
<c></c>
<c>*测试分类效果</c>
<l>confidence:=[]</l>
<c as_id="image_acquisition" as_name="Image Acquisition 04" as_grp="[1,1]" as_ord="1">* Image Acquisition 04: Code generated by Image Acquisition 04</c>
<l as_id="image_acquisition" as_name="Image Acquisition 04" as_grp="[1,2]" as_ord="1">list_files ('C:/Users/Administrator/Desktop/大帽/测试', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 04" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<c></c>
<c></c>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    read_image (Image, ImageFiles[Index])</l>
<c></c>
<l>    threshold(Image, Region1, 1, 255)</l>
<l>    reduce_domain(Image, Region1, ImageReduced2)</l>
<l>    crop_domain(ImageReduced2, ImagePart2)</l>
<l>    cooc_feature_image (region1, ImagePart1, 6, 0, Energy1, Correlation1, Homogeneity1, Contrast1)</l>
<l>    FeatureVector2 := [Energy1,Correlation, Homogeneity, Contrast]</l>
<l>    sobel_amp (ImagePart2, EdgeAmplitude3, 'sum_abs', 3)</l>
<l>    gray_histo_abs (Region1, EdgeAmplitude3, 1, AbsoluteHisto3)</l>
<l>    FeatureVector2 :=[FeatureVector2,AbsoluteHisto3]</l>
<l>    FeatureVector := real(FeatureVector2)</l>
<c>    *通过多层感知器计算一个特征向量的类</c>
<l>    classify_class_mlp (Handle, FeatureVector, 2, FoundClassIDs, Confidence)</l>
<l>    confidence:=[confidence,Confidence]</l>
<l>    if (FoundClassIDs[0]==0)</l>
<c></c>
<l>        dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>        dev_display(Image)        </l>
<l>        disp_message (WindowHandle, ImageFiles[Index], 'window', 0, 0, 'black', 'true')</l>
<l>        disp_message (WindowHandle, 'Result=big', 'window', 20, 0, 'black', 'true')</l>
<l>        stop()    </l>
<l>    else</l>
<c>        </c>
<l>        dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>        dev_display(Image)</l>
<l>        disp_message (WindowHandle, ImageFiles[Index], 'window', 0, 0, 'black', 'true')</l>
<l>        disp_message (WindowHandle, 'Result=small', 'window', 20, 0, 'black', 'true')</l>
<l>        stop()   </l>
<l>    endif</l>
<l>endfor</l>
<l>stop()</l>
<c>*清除多层感知器</c>
<l>clear_class_mlp (Handle)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
